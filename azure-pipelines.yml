resources:
  repositories:
    - repository: templates
      type: git
      name: Helpers/BuildTemplates
      ref: main

parameters:
- name: 'majorVersion'
  default: 0
  type: number
- name: 'minorVersion'
  type: number
  default: 1
- name: patchVersion
  default: 0
  type: number
  
variables:
- name: ProjectName
  value: 'TestApplication'
  # Version information and suffix can be used in pipeline name
- name: MajorVersion
  value: ${{ parameters.majorVersion }}
- name: MinorVersion
  value: ${{ parameters.minorVersion }}
- name: PatchVersion
  value: ${{ parameters.patchVersion }}
  # Only variables can be used within the counter method, no parameters. Starting the revision at 100, to have the same length in the revision for all versions (format below does not seem to support something like '3:000')
- name: Revision
  value: $[ counter(format('{0}.{1}.{2}', variables['MajorVersion'], variables['MinorVersion'], variables['PatchVersion']), 100) ]
- name: VersionSuffix
  value: '-dev'
- name: Version
  value: $[ format('{0}.{1}.{2}-dev{3}', variables['MajorVersion'], variables['MinorVersion'], variables['PatchVersion'], variables['Revision']) ]

name: TestApplication-$(MajorVersion).$(MinorVersion).$(PatchVersion)$(VersionSuffix)-$(DayOfYear)$(rev:.r)

stages:
- stage: build
  jobs:
  - job: Build
    pool: Default
    steps:

    - checkout: self
      clean: true
      fetchDepth: 1000

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '9.x'
      displayName: 'Use dotnet 9'

    - task: NodeTool@0
      inputs:
        versionSource: 'spec'
        versionSpec: '>=20.15.x'
      displayName: 'Use node 20'

    - task: SonarQubePrepare@7
      continueOnError: true
      inputs:
        SonarQube: 'SonarQube'
        scannerMode: 'dotnet'
        projectKey: $(ProjectName)
        projectName: $(ProjectName)
        projectVersion: ${{ format('{0}.{1}.{2}', parameters.majorVersion, parameters.minorVersion, parameters.patchVersion) }}
        extraProperties: |
          # Additional properties that will be passed to the scanner, 
          # Put one key=value per line, example:
          # sonar.exclusions=**/*.bin
          sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)\**\*.trx
          sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)\**\*coverage.opencover.xml
          sonar.exclusions=**/Migrations/**/*
          sonar.exclusions=**/*.razor

    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: 'TestApplication.sln'
      displayName: 'Restore nuget packages'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: 'TestApplication.sln'
        arguments: "--configuration Release --no-restore /p:Version=$(Version)"
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'Build solution'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: |
          **/*[Tt]ests/*.csproj
          !**/UI/*[Tt]ests/*.csproj
        arguments: '--configuration Release --no-restore --no-build --collect "XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover'
        publishTestResults: true
      displayName: 'Run unit tests'
      continueOnError: true

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

    - task: SonarQubeAnalyze@7
      displayName: 'Run sonarqube analysis'
      inputs:
        jdkversion: 'JAVA_HOME'
      continueOnError: true
    - task: SonarQubePublish@7
      displayName: 'Publish sonarqube analysis'
      continueOnError: true
      inputs:
        pollingTimeoutSec: '300'

  - job: Retain_Pipeline
    pool: Default
    dependsOn: Build
    condition: and(succeeded(), not(canceled()), startsWith(variables['Build.SourceBranch'], 'refs/heads/auto-fix/'))
    steps:
      - bash: |
          curl \
            -X POST \
            -H 'Authorization: Bearer $(System.AccessToken)' \
            -H 'Content-Type: application/json' \
            -d '[
                  {
                    "daysValid": 360,
                    "definitionId": $(System.DefinitionId),
                    "ownerId": "User:$(Build.RequestedForId)",
                    "protectPipeline": false,
                    "runId": $(Build.BuildId)
                  }
                ]' \
            "$(System.CollectionUri)$(System.TeamProject)/_apis/build/retention/leases?api-version=6.0-preview.1"
        condition: and(succeeded(), not(canceled()))
        name: RetainOnSuccess
        displayName: Retain on Success

